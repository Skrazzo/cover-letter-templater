/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TemplatesIndexRouteImport } from './routes/templates/index'
import { Route as TemplatesCreateRouteImport } from './routes/templates/create'
import { Route as TemplatesTemplateIdRouteImport } from './routes/templates/$templateId'
import { Route as CoverCreateRouteImport } from './routes/cover/create'
import { Route as CoverCoverIdRouteImport } from './routes/cover/$coverId'
import { Route as TemplatesEditTemplateIdRouteImport } from './routes/templates/edit.$templateId'
import { Route as CoverEditCoverIdRouteImport } from './routes/cover/edit.$coverId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesIndexRoute = TemplatesIndexRouteImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesCreateRoute = TemplatesCreateRouteImport.update({
  id: '/templates/create',
  path: '/templates/create',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesTemplateIdRoute = TemplatesTemplateIdRouteImport.update({
  id: '/templates/$templateId',
  path: '/templates/$templateId',
  getParentRoute: () => rootRouteImport,
} as any)
const CoverCreateRoute = CoverCreateRouteImport.update({
  id: '/cover/create',
  path: '/cover/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CoverCoverIdRoute = CoverCoverIdRouteImport.update({
  id: '/cover/$coverId',
  path: '/cover/$coverId',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesEditTemplateIdRoute = TemplatesEditTemplateIdRouteImport.update({
  id: '/templates/edit/$templateId',
  path: '/templates/edit/$templateId',
  getParentRoute: () => rootRouteImport,
} as any)
const CoverEditCoverIdRoute = CoverEditCoverIdRouteImport.update({
  id: '/cover/edit/$coverId',
  path: '/cover/edit/$coverId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/cover/$coverId': typeof CoverCoverIdRoute
  '/cover/create': typeof CoverCreateRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates/create': typeof TemplatesCreateRoute
  '/templates': typeof TemplatesIndexRoute
  '/cover/edit/$coverId': typeof CoverEditCoverIdRoute
  '/templates/edit/$templateId': typeof TemplatesEditTemplateIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/cover/$coverId': typeof CoverCoverIdRoute
  '/cover/create': typeof CoverCreateRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates/create': typeof TemplatesCreateRoute
  '/templates': typeof TemplatesIndexRoute
  '/cover/edit/$coverId': typeof CoverEditCoverIdRoute
  '/templates/edit/$templateId': typeof TemplatesEditTemplateIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/cover/$coverId': typeof CoverCoverIdRoute
  '/cover/create': typeof CoverCreateRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates/create': typeof TemplatesCreateRoute
  '/templates/': typeof TemplatesIndexRoute
  '/cover/edit/$coverId': typeof CoverEditCoverIdRoute
  '/templates/edit/$templateId': typeof TemplatesEditTemplateIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/cover/$coverId'
    | '/cover/create'
    | '/templates/$templateId'
    | '/templates/create'
    | '/templates'
    | '/cover/edit/$coverId'
    | '/templates/edit/$templateId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/cover/$coverId'
    | '/cover/create'
    | '/templates/$templateId'
    | '/templates/create'
    | '/templates'
    | '/cover/edit/$coverId'
    | '/templates/edit/$templateId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/cover/$coverId'
    | '/cover/create'
    | '/templates/$templateId'
    | '/templates/create'
    | '/templates/'
    | '/cover/edit/$coverId'
    | '/templates/edit/$templateId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  CoverCoverIdRoute: typeof CoverCoverIdRoute
  CoverCreateRoute: typeof CoverCreateRoute
  TemplatesTemplateIdRoute: typeof TemplatesTemplateIdRoute
  TemplatesCreateRoute: typeof TemplatesCreateRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
  CoverEditCoverIdRoute: typeof CoverEditCoverIdRoute
  TemplatesEditTemplateIdRoute: typeof TemplatesEditTemplateIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/create': {
      id: '/templates/create'
      path: '/templates/create'
      fullPath: '/templates/create'
      preLoaderRoute: typeof TemplatesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/$templateId': {
      id: '/templates/$templateId'
      path: '/templates/$templateId'
      fullPath: '/templates/$templateId'
      preLoaderRoute: typeof TemplatesTemplateIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cover/create': {
      id: '/cover/create'
      path: '/cover/create'
      fullPath: '/cover/create'
      preLoaderRoute: typeof CoverCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cover/$coverId': {
      id: '/cover/$coverId'
      path: '/cover/$coverId'
      fullPath: '/cover/$coverId'
      preLoaderRoute: typeof CoverCoverIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/edit/$templateId': {
      id: '/templates/edit/$templateId'
      path: '/templates/edit/$templateId'
      fullPath: '/templates/edit/$templateId'
      preLoaderRoute: typeof TemplatesEditTemplateIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cover/edit/$coverId': {
      id: '/cover/edit/$coverId'
      path: '/cover/edit/$coverId'
      fullPath: '/cover/edit/$coverId'
      preLoaderRoute: typeof CoverEditCoverIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  CoverCoverIdRoute: CoverCoverIdRoute,
  CoverCreateRoute: CoverCreateRoute,
  TemplatesTemplateIdRoute: TemplatesTemplateIdRoute,
  TemplatesCreateRoute: TemplatesCreateRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
  CoverEditCoverIdRoute: CoverEditCoverIdRoute,
  TemplatesEditTemplateIdRoute: TemplatesEditTemplateIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
